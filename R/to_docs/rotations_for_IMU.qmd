---
title: "Calculating oriantation using IMU"
format:
    html:
      fig-width: 8
      fig-height: 4
      code-fold: true
author: Oliver DÃ¼rr
editor: visual
---

```{r setup, include=FALSE}
  library(tidyverse)
  library(onion) #For quaterions
```

This document describes how the orientation of the IMU [MPU-9250](https://invensense.tdk.com/products/motion-tracking/9-axis/mpu-9250/) can be calculated.

There are basically two ways to calculate the orientation of the IMU.

-   First we can use the result provided in the sensor fusion algorithm on the chip. This is done in a Digital Motion Processor (DMP) on the sensor chip and send as a quaternion.

-   Second, we can use raw data and do the filtering ourself.\

# Using the DMP quaternion

The result of the calculations in the Digital Motion Processor (DMP) done in the IMU are reported as quaternions (basically a short coding of the rotation between the IMU and the fixed laboratory system). Technically they are send to the Aduino (as a byte vector the `fifoBuffer`). On the Aduino the following steps the result of the FIFO Buffer is parsed and written in a Quaternion with components $q=(q_w, q_x, q_y, q_z)$ this is done in \`dmpGetQuaternion\`

## Getting the quaternion q

In the first line the quaternion send from the DSP is read from the `fifoBuffer` and parsed into the variable `q`. The quaternion `q` contains all information about a single IMU. This is done with the following code:

```{c, eval=FALSE}
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
    data[0] = ((packet[0] << 8) | packet[1]);
    data[1] = ((packet[4] << 8) | packet[5]);
    data[2] = ((packet[8] << 8) | packet[9]);
    data[3] = ((packet[12] << 8) | packet[13]);
    return 0;
}

uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
    if (status == 0) {
        q -> w = (float)qI[0] / 16384.0f;
        q -> x = (float)qI[1] / 16384.0f;
        q -> y = (float)qI[2] / 16384.0f;
        q -> z = (float)qI[3] / 16384.0f;
        return 0;
    }
    return status; // int16 return value, indicates error if this line is reached
}
```

## Understanding the quaternion

A good source is shown in the following [youtube video](https://www.youtube.com/watch?v=Wv683WQHsWY).

{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}

{{< video https://www.youtube.com/embed/Wv683WQHsWY >}}

The quaternion send from the DMP is a rotation quaternion. A rotation quarternion describes a rotation of $\theta$ around a vector $\vec{r}$ as

$$
q(\theta, v) =  \left(\cos(\frac{\theta}{2}),\; \sin(\frac{\theta}{2})  r_1, \;\sin(\frac{\theta} {2}) r_2, \;\sin(\frac{\theta}{2}) r_3 \right)
$$

-   Step 1: Align the lab coordinate system and the coordinate system of the IMU. In this case we have the identity quaternion $q=(1,0,0,0)$

    -   Put the sensor on the table and then rotate until you find the identity quaternion.

-   Step 2: Turn around x-axis in positive direction. If you found the right axis you have $q(\theta, v) = \left(\cos(\theta/2),\; \sin(\theta /2), \;0, \;0\right)$ and a rotation around 90 degrees in positive direction you have \$q=(0,1,0,0)\$ Rotate in the other direction you should get $q=(0,-1,0,0)$

    Repeat step 2 for the remaining axis. If all goes as expected you have a right handed coordinate system with a body-to-lab (a.k.a. frame) based quaternion.

Calculation of yaw, pitch, roll

The code used on the Arduino has been wrong [ypr_calculations.html](https://oduerr.github.io/gesture/ypr_calculations.html) it can be directly calculated from the quaternion via.

$$
\begin{align*}
\text{roll} &= \text{atan2}(2 \cdot (w \cdot x + y \cdot z), 1 - 2 \cdot (x^2 + y^2)) \\
\text{pitch} &= \text{asin}(2 \cdot (w \cdot y - z \cdot x)) \\
\text{yaw} &= \text{atan2}(2 \cdot (w \cdot z + x \cdot y), 1 - 2 \cdot (y^2 + z^2))
\end{align*}
$$

```{r ypr}
  #From poyu (value9250.py)
  #def quart_to_rpy(w, x, y, z):
  #  roll = math.atan2(2 * (w * x + y * z), 1 - 2 * (x * x + y * y))
  #  pitch = math.asin(2 * (w * y - x * z))
  #  yaw = math.atan2(2 * (w * z + x * y), 1 - 2 * (z * z + y * y))
  #  return yaw, pitch, roll
  quart_to_ypr = function(q){
    w = q[1]
    x = q[2]
    y = q[3]
    z = q[4]
    roll = atan2(2 * (w * x + y * z), 1 - 2 * (x * x + y * y))
    pitch = asin(2 * (w * y - x * z))
    yaw = atan2(2 * (w * z + x * y), 1 - 2 * (z * z + y * y))
    return(c(yaw,pitch,roll))
  }
```

## TODO make nicer Testing the code with special value

Note that the quaternion can be understood as a transformation of the IMU system into the fixed space system. Given a rotation about $\theta$ and the rotational $v_1, v_2, v_3$ the quaternion would be

$$
q=(\cos(\theta/2), \sin(\theta/2)v_1,\sin(\theta/2)v_2, \sin(\theta/2)v_3)
$$

### Single yaw

Let's construct some special quaternions and see if the results are correct. Checking the yaw

```{r yaw}
  alpha = 30 * 2 * pi / 360
  q = c(cos(alpha/2), 0, 0, 1.0) 
  q  = q / sqrt(sum(q^2))
  2*acos(q[1])
```

```{r yaw1}
  rnames = c('yaw', 'pitch', 'roll')
  data.frame(
      quart_to_ypr = quart_to_ypr(q),
      row.names = rnames 
    ) 
```

### Single pitch

```{r pitch}
  q = c(0.10, 0, 1.0, 0.0) 
  q  = q / sqrt(sum(q^2))
  #The angle is 
  2*acos(q[1])
  #of
  pi - 2*acos(q[1])
```

```{r pitch2}
  data.frame(
      quart_to_ypr = quart_to_ypr(q),
      row.names = rnames 
    )
```

There seems to be a numerical artifact.

### Single roll

Let's look at a single roll about the angle:

```{r}
  q = c(5, 1.0, 0, 0.0) 
  q  = q / sqrt(sum(q^2))
  q
  2*acos(q[1]) * 360/(2*pi)
```

```{r}
  data.frame(
      quart_to_ypr = quart_to_ypr(q),
      row.names = rnames 
    ) 
  #%>% #kable is not needed in the html the output still looks good
  #and it destroys the printing in RStudio
  #kableExtra::kable()
```

### Single roll

A combined transformation

```{r}
  q = c(0.86169383, 0.02081877, -0.5058515, 0.03412598)
  correct = c(0.15911653941132517, -60.832556785346696, -9.335093630495875) * 2*pi/360
  data.frame(
      quart_to_ypr = quart_to_ypr(q),
      correct,
      row.names = rnames 
    ) 
```

# 
